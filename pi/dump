#!/bin/bash

# Global const
DEFAULT_SRC_BOOT_MOUNT_POINT="./src_boot/"
DEFAULT_SRC_ROOT_MOUNT_POING="./src_root/"
DEFAULT_DST_BOOT_MOUNT_POINT="./dst_boot/"
DEFAULT_DST_ROOT_MOUNT_POINT="./dst_root/"
BOOT_FSTYPE="vfat"
ROOT_FSTYPE="ext4"

function help_message() {
    prog=$1
    cat <<  EOF
Usage: ${prog}
    -h, --help                       
        Print help message.

    -dev, --device=[device]     
        Main device path to be dumped from, example "/dev/mmcblk0","/dev/sda".
        By default, the 1st sub device must be boot partition.
        And, the 2nd sub device must be root partition.
        TODO: Use LABEL to find out boot partition and root partition.

        Example:
        lsblk /dev/sda
        NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
        sda      8:0    1 59.5G  0 disk
        |-sda1   8:1    1  256M  0 part
        \`-sda2  8:2    1  4.1G  0 part
EOF
}

function echo_succ() {
    msg=$1
    echo -e "\033[;32m${msg}\033[0m"
}
function echo_succ_n() {
    msg=$1
    echo -ne "\033[;32m${msg}\033[0m"
}

function echo_error() {
    msg=$1
    echo -e "\033[;31m${msg}\033[0m"
}

function echo_error_n() {
    msg=$1
    echo -ne "\033[;31m${msg}\033[0m"
}

function check_bin() {
    bin=$1

    echo -n  "checking ${bin} ... "
    loc=`which ${bin}` || { echo_error "not found"; return 1; }
    echo_succ "${loc}"
}

function check_dev() {
    dev=$1

    echo -n "checking device ${dev} ... "
    sudo ${LSBLK} ${dev} > /dev/null 2>&1 || { echo_error "doesn't exist"; return 1; }
    echo_succ "ok"
}

function get_device_major_num() {
    dev=$1
    maj=`sudo ${LSBLK} ${dev} -o MAJ:MIN | sed 1d | head -n 1 | awk -F':' '{gsub(" ", "", $1); print $1}'`
    echo "${maj}"
}

function lookup_device_by_majmin() {
    dev=$1
    maj=$2
    min=$3
    
    sdev=`sudo ${LSBLK} ${dev} -o NAME,PATH,MAJ:MIN | sed 1d | grep "${maj}:${min}" | awk '{print $2}'`
    echo "${sdev}"
}

function check_mount_point() {
    dev=$1
    if_mounted=True
    mount_point=""
    fstype=""
    
    sudo ${MOUNT} -l | grep "${dev}" > /dev/null 2>&1 || if_mounted=False
    if [ ${if_mounted} == False ]
    then
        echo "${if_mounted}"
        return
    fi

    mount_point=`sudo ${MOUNT} -l | grep ${dev} | awk '{print $3}'`
    fstype=`sudo ${MOUNT} -l | grep ${dev} | awk '{print $5}'`
    echo "${if_mounted} ${mount_point} ${fstype}"
}

function get_fs_size_MB() {
    mp=$1
    sudo df ${mp} | sed 1d | awk '{print int($2/1024) }'
}

function get_fs_used_MB() {
    mp=$1
    sudo df ${mp} | sed 1d | awk '{print int($3/1024) }'
}

## Parse arguments
if_help=false
src_device=""
src_boot_device=""
src_root_device=""
dst_boot_mount_point=${DEFAULT_DST_BOOT_MOUNT_POINT}
dst_root_mount_point=${DEFAULT_DST_ROOT_MOUNT_POINT}

for opt
do
    case ${opt} in
        -*=*) value=$(echo "$opt"|sed -e 's/[-_a-zA-Z0-9]*=//') ;;
           *) value=""                                          ;;
    esac

    case ${opt} in
        -h|--help)                  if_help=true                                      ;;
        -dev=*|--device=*)          src_device=${value}                               ;;
        *) echo "invalid argument $opt"
           exit 1
           ;;
    esac
done

[ ${if_help} == true ] && help_message $0 && exit 0
[ "${src_device}" == "" ] && echo "-dev | --device is required" && exit 1

echo ""
echo "[Check bins]"
check_bin "pv"        || exit 1
check_bin "fdisk"     || exit 1
check_bin "mount"     || exit 1
check_bin "parted"    || exit 1
check_bin "kpartx"    || exit 1
check_bin "mkfs.vfat" || exit 1
check_bin "mkfs.ext4" || exit 1
check_bin "losetup"   || exit 1
check_bin "blkid"     || exit 1
check_bin "lsblk"     || exit 1
check_bin "dump"      || exit 1
check_bin "restore"   || exit 1

FDISK=$(which fdisk)
MOUNT=$(which mount)
PARTED=$(which parted)
KPARTX=$(which kpartx)
MKFS_VFAT=$(which mkfs.vfat)
MKFS_EXT4=$(which mkfs.ext4)
LOSETUP=$(which losetup)
BLKID=$(which blkid)
LSBLK=$(which lsblk)
DUMP=$(which dump)
RESTORE=$(which restore)

test -e ${dst_boot_mount_point} && { echo_error_n "Warning: "; echo "\"${dst_boot_mount_point}\" already exists, remove it before continue."; exit 1; }
test -e ${dst_root_mount_point} && { echo_error_n "Warning: "; echo "\"${dst_root_mount_point}\" already exists, remove it before continue."; exit 1; }

echo ""
echo "[Check src device]"
check_dev ${src_device}      || exit 1
maj=`get_device_major_num ${src_device}`
echo -n "MAJ ... " && echo_succ "${maj}"

boot_device_min=1
echo -n "Lookup boot device(MAJ:MIN=${maj}:${boot_device_min}) ... "
src_boot_device=`lookup_device_by_majmin "${src_device}" "${maj}" "${boot_device_min}"`
[ "${src_boot_device}" == "" ] && echo_error "not found" && exit 1
echo_succ "${src_boot_device}"

root_device_min=2
echo -n "Lookup root device(MAJ:MIN=${maj}:${root_device_min}) ... "
src_root_device=`lookup_device_by_majmin "${src_device}" "${maj}" "${root_device_min}"`
[ "${src_root_device}" == "" ] && echo_error "not found" && exit 1
echo_succ "${src_root_device}"

echo ""
echo "[Check src mount point]"
if_src_boot_mounted=False
src_boot_mount_point=""
src_boot_fstype=""

if_src_root_mounted=False
src_root_mount_point=""
src_root_fstype=""

read if_src_boot_mounted src_boot_mount_point src_boot_fstype < <(check_mount_point "${src_boot_device}")
read if_src_root_mounted src_root_mount_point src_root_fstype < <(check_mount_point "${src_root_device}")

if [ ${if_src_boot_mounted} == True ] 
then
    echo -n "${src_boot_device} already mounted on ${src_boot_mount_point}, ${src_boot_fstype} ..."
    [ "${src_boot_fstype}" != ${BOOT_FSTYPE} ] && echo_error_n "Error: " && echo "Boot fstype must be ${BOOT_FSTYPE}" && exit 1
    echo_succ "ok"
fi

if [ ${if_src_root_mounted} == True ] 
then
    echo -n "${src_root_device} already mounted on ${src_root_mount_point}, ${src_root_fstype} ..."
    [ "${src_root_fstype}" != ${ROOT_FSTYPE} ] && echo_error_n "Error: " && echo "Root fstype must be ${ROOT_FSTYPE}" && exit 1
    echo_succ "ok"
fi

if [ ${if_src_boot_mounted} == False ]  
then
    # TODO
    echo "${src_boot_device} not mounted yet"
    echo "Mounting ${src_boot_device} to ${DEFAULT_SRC_BOOT_MOUNT_POINT}"   
fi

if [ ${if_src_root_mounted} == False ]  
then
    # TODO
    echo "${src_root_device} not mounted yet"
    echo "Mounting ${src_root_device} to ${DEFAULT_SRC_ROOT_MOUNT_POING}"   
fi

echo ""
echo "[Create img file]"
boot_fs_size_MB=`get_fs_size_MB "${src_boot_mount_point}"`
root_fs_used_MB=`get_fs_used_MB "${src_root_mount_point}"`
echo "Boot fs size: ${boot_fs_size_MB}MB"
echo "Root fs size: ${root_fs_used_MB}MB"
img_file_size_MB=`echo "${boot_fs_size_MB}+${root_fs_used_MB}+500" | bc ` # 500MB larger
echo "New img file size: ${img_file_size_MB}MB"
img_file="pi-`date +20%y%m%d%H%M`.img"
echo "Creating ${img_file}..."
sudo dd bs=1M count=${img_file_size_MB} if=/dev/zero | pv -s ${img_file_size_MB}M | sudo dd bs=1M of=./${img_file}
ls -l ./${img_file} > /dev/null 2>&1 || { echo_error_n "Error:"; echo "${img_file} not found"; exit 1; }
echo_succ "..........................ok"

echo ""
echo "[Make partitions]"
boot_start_sector=`sudo ${FDISK} -l ${src_device} | grep "${src_boot_device}" | awk '{print $2}'`
boot_end_sector=`sudo ${FDISK} -l ${src_device} | grep "${src_boot_device}" | awk '{print $3}'`
root_start_sector=`sudo ${FDISK} -l ${src_device} | grep "${src_root_device}" | awk '{print $2}'`
root_end_sector="-1" # To the end
echo "Boot partition, ${src_boot_device} sectors: ${boot_start_sector}s ${boot_end_sector}s"
echo "Root partition, ${src_root_device} sectors: ${root_start_sector}s ${root_end_sector}"

sudo ${PARTED} ${img_file} --script "mklabel msdos"
sudo ${PARTED} ${img_file} --script "mkpart primary fat32 ${boot_start_sector}s ${boot_end_sector}s"
sudo ${PARTED} ${img_file} --script "mkpart primary ext4 ${root_start_sector}s ${root_end_sector}s" 

echo ""
echo "[Create dst device]"
echo "Creating loop device ..."
dst_device=`sudo ${LOSETUP} -f --show ${img_file}` || { echo_error "error"; exit 1; }
echo_succ "...................${dst_device}"

echo "Creating map device ..."
sudo ${KPARTX} -va ${dst_device} || { echo_error "error"; exit 1; }
echo_succ "..................................ok"

ln=`echo "${dst_device}" | sed 's/\/dev\///g'`
dst_boot_device="/dev/mapper/${ln}p1"
dst_root_device="/dev/mapper/${ln}p2"

echo "mkfs.vfat ${dst_boot_device} ..."
sudo ${MKFS_VFAT} -n boot ${dst_boot_device} || { echo_error "error"; exit 1; }
echo_succ "..................................ok"

echo "mkfs.ext4 ${dst_root_device}..."
sudo ${MKFS_EXT4} ${dst_root_device} || { echo_error "error"; exit 1; }
echo_succ "..................................ok"

echo ""
echo "[Mount dst device]"
sudo mkdir -pv ${dst_boot_mount_point} ${dst_root_mount_point} || { echo_error_n "Error: "; echo "mkdir fail"; exit 1; }
echo -n "Mounting ${dst_boot_device} -> ${dst_boot_mount_point}..."
sudo ${MOUNT} -t ${BOOT_FSTYPE} -o uid=pi,gid=pi ${dst_boot_device} ${dst_boot_mount_point} || { echo_error "error"; exit 1; }
echo_succ "ok"

echo -n "Mounting ${dst_root_device} -> ${dst_root_mount_point}..."
sudo ${MOUNT} -t ${ROOT_FSTYPE} ${dst_root_device} ${dst_root_mount_point} || { echo_error "error"; exit 1; }
echo_succ "ok"

echo ""
echo "[Clone filesystem]"
echo "Cloning boot filesystem...."

sudo cp -rfp ${src_boot_mount_point}/* ${dst_boot_mount_point} 2>/dev/null
echo_succ "..............................ok"

echo "Cloning root filesystem...."
sudo chown -R pi:pi ${dst_root_mount_point}
rm -rfv "${dst_root_mount_point}/lost+found"
cd ${dst_root_mount_point}
sudo ${DUMP} -0auf - ${src_root_mount_point} | sudo ${RESTORE} -rf - 
cd ../
echo_succ "..............................ok"

boot_partuuid=`sudo ${LSBLK} ${dst_boot_device} -o PARTUUID | sed 1d` 
root_partuuid=`sudo ${LSBLK} ${dst_root_device} -o PARTUUID | sed 1d` 
echo "Boot part: ${boot_partuuid}"
echo "Root part: ${root_partuuid}"

echo -n "Updating ${dst_boot_mount_point}/cmdline.txt ..."
sed -i "s/PARTUUID=[0-9a-zA-Z-]*/PARTUUID=${root_partuuid}/g" ${dst_boot_mount_point}/cmdline.txt
echo_succ "ok"

echo -n "Updating ${dst_root_mount_point}/etc/fstab ..."
cat << EOF | sudo tee > /dev/null ${dst_root_mount_point}/etc/fstab
proc            /proc           proc    defaults          0       0
PARTUUID=${boot_partuuid}  /boot           vfat    defaults          0       2
PARTUUID=${root_partuuid}  /               ext4    defaults,noatime  0       1
# a swapfile is not a swap partition, no line here
#   use  dphys-swapfile swap[on|off]  for that
EOF
echo_succ "ok"

echo ""
echo "[Cleanup]"
for l in ${dst_boot_mount_point} ${dst_root_mount_point}
do
    test -e $l && echo "umount $l ..." && sudo umount $l
    test -e $l && echo "remove $l ..." && rm -rfv $l
done

echo "Remove device ${dst_device}"
sudo kpartx -d ${dst_device}
sudo losetup -d ${dst_device}

echo "${img_file}"
echo_succ "Done"

